//#region //! Default Imports
import { createSlice, PayloadAction, createAsyncThunk } from "@reduxjs/toolkit";
import { createSelector } from "reselect";
import { apiCallBegan, apiCallSuccess, apiCallFailed } from "./_actions/api";
import { FoodDto, PaginatedListOfFoodDto } from "../services/web-api-client";
import config from "../config.json";
import moment from "moment";
import { AppDispatch, RootState } from "./_store/store";

//#endregion

//#region //* Custom Imports

//* Any Custom Imports related to Action Wrappers and Selectors goes here

//#endregion

//* ---
//! NO NEED TO USE THESE THUNKS WHEN YOU GOT AN API MIDDLEWARE
//* ---
//#region //! Async Only Thunks

export const doActionAsync = createAsyncThunk(
	"food/fetchCount",
	async (params: any) => {
		const response: any = await customApiCall(params);
		// The response we return becomes the `fulfilled` action payload
		return response.data;
	}
);

const customApiCall = (params: any) => {
	return new Promise((resolve) =>
		setTimeout(() => resolve({ data: params }), 500)
	);
};

//#endregion

//#region //! Custom Thunks - To Perform Sync & Async Operations

export const doAction =
	(params: any) => (dispatch: AppDispatch, getState: Function) => {
		// const currentValue = getPaginatedFoods(1, 1);
		const payload: PaginatedListOfFoodDto = {
			items: [],
			pageIndex: 1,
			totalPages: 1,
			totalCount: 1,
			hasPreviousPage: false,
			hasNextPage: false,
		};
		dispatch(paginatedListOfFoodDtosReceived(payload));
	};

//#endregion

//#region //! State Initialization

const initialState: PaginatedListOfFoodDto = {
	items: [],
	pageIndex: 1,
	totalPages: 1,
	totalCount: 1,
	hasPreviousPage: false,
	hasNextPage: false,
};

//#endregion

//#region //! Mapper

function paginatedListOfFoodDtoMapper(
	paginatedListOfFoodDtos: PaginatedListOfFoodDto,
	action: PayloadAction<PaginatedListOfFoodDto>
) {
	paginatedListOfFoodDtos.items = action.payload.items;
	paginatedListOfFoodDtos.totalCount = action.payload.totalCount;
	paginatedListOfFoodDtos.totalPages = action.payload.totalPages;
	paginatedListOfFoodDtos.pageIndex = action.payload.pageIndex;
	paginatedListOfFoodDtos.hasPreviousPage = action.payload.hasPreviousPage;
	paginatedListOfFoodDtos.hasNextPage = action.payload.hasNextPage;
}
//#endregion

//#region //! Slice

const FoodSlice = createSlice({
	name: "Food",
	initialState,
	reducers: {
		paginatedListOfFoodDtoPaginatedListQueried(
			paginatedListOfFoodDtos,
			action: PayloadAction<PaginatedListOfFoodDto>
		) {
			paginatedListOfFoodDtoMapper(paginatedListOfFoodDtos, action);
		},
		paginatedListOfFoodDtosRequested(
			paginatedListOfFoodDtos,
			action: PayloadAction<PaginatedListOfFoodDto>
		) {},
		paginatedListOfFoodDtosReceived(
			paginatedListOfFoodDtos,
			action: PayloadAction<PaginatedListOfFoodDto>
		) {
			paginatedListOfFoodDtoMapper(paginatedListOfFoodDtos, action);
		},
		paginatedListOfFoodDtosRequestFailed(
			paginatedListOfFoodDtos,
			action: PayloadAction<PaginatedListOfFoodDto>
		) {},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(doActionAsync.pending, (paginatedListOfFoodDtos) => {
				paginatedListOfFoodDtos.hasNextPage = true;
			})
			.addCase(
				doActionAsync.fulfilled,
				(
					paginatedListOfFoodDtos,
					action: PayloadAction<PaginatedListOfFoodDto>
				) => {
					paginatedListOfFoodDtos.hasNextPage = false;
					paginatedListOfFoodDtos.items = action.payload.items;
				}
			)
			.addCase(
				doActionAsync.rejected,
				(paginatedListOfFoodDtos, action) => {
					paginatedListOfFoodDtos.hasNextPage = false; // raise event
				}
			);
	},
});

//#endregion

//#region //* Action Wrappers

export const getPaginatedFoods =
	(pageNumber: number, pageSize: number) =>
	(dispatch: AppDispatch, getState: RootState) => {
		const items = getState.entities.food.items;

		if (items && items.length >= 0) {
			const diffInMinutes = moment().diff(
				moment().add(-10, "minutes"),
				"minutes"
			);
			if (diffInMinutes < 10) return;
		}

		return dispatch(
			apiCallBegan({
				url: config.food.urls.get,
				onStart: paginatedListOfFoodDtosRequested.type, 
				onSuccess: paginatedListOfFoodDtosReceived.type,
				onError: paginatedListOfFoodDtosRequestFailed.type
			})
		);
	};

//#endregion

//#region //* Selectors

const PaginatedFoods = (
	state: PaginatedListOfFoodDto
): Array<FoodDto> | undefined => state.items;

export const selectPaginatedFoodsActive = () =>
	createSelector<
		PaginatedListOfFoodDto,
		FoodDto[] | undefined,
		FoodDto[] | undefined
	>(PaginatedFoods, (items) => items);

const selectPaginatedFoods = (state: RootState) => state.entities.food.items;

export const selectActivePaginatedFoods = () =>
	createSelector(selectPaginatedFoods, (fc): FoodDto[] | undefined => fc);

//#endregion

//#region //! Exports

export const {
	paginatedListOfFoodDtoPaginatedListQueried,
	paginatedListOfFoodDtosReceived,
	paginatedListOfFoodDtosRequestFailed,
	paginatedListOfFoodDtosRequested,
} = FoodSlice.actions;

export default FoodSlice.reducer;

//#endregion
