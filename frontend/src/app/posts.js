//#region //! Default Imports

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { createSelector } from "reselect";
import { apiCallBegan } from "./_actions/api";
import moment from "moment";
import config from "../config.json";

//#endregion

//#region //* Custom Imports

//* Any Custom Imports related to Action Wrappers and Selectors goes here

//#endregion

//#region //* Action Creators Wrappers

export const getPosts = () => (dispatch, getState) => {
	const { lastFetched } = getState().entities.posts;

	const diffInMinutes = moment().diff(moment(lastFetched), "seconds");
	if (diffInMinutes > 10) return;
	return dispatch(
		apiCallBegan({
			url: config.posts.urls.get,
			onStart: postsRequested.type,
			onSuccess: postsReceived.type,
			onError: postsRequestFailed.type,
		})
	);
};

//#endregion

//#region //* Selector - Memoization Done by reselect

// The functions below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.post.value)`
export const getPostsCount = (state) => state.entities.posts.list.length;
export const getAllPosts = (state) => state.entities.posts.list;

export const getPostsOfUserId = createSelector(
	(state) => state.entities.post,
	(state) => state.entities.posts, // Read users from state and then do the math in the next line
	(post, posts) => post.list.filter((post) => !post.resolved)
);

//#endregion

//! *****
//! *****
//! *****

//#region //! State Initialization

const initialState = {
	loading: false,
	list: [],
	lastFetched: Date.now(),
};

//#endregion

//* ---
//! NO NEED TO USE THESE THUNKS WHEN YOU GOT AN API MIDDLEWARE
//* ---
//#region //! Async Only Thunks

export const doActionAsync = createAsyncThunk(
	"post/fetchCount",
	async (params) => {
		const response = await customApiCall(params);
		// The response we return becomes the `fulfilled` action payload
		return response.data;
	}
);

const customApiCall = (params) => {
	return new Promise((resolve) =>
		setTimeout(() => resolve({ data: params }), 500)
	);
};

//#endregion

//#region //! Custom Thunks - To Perform Sync & Async Operations

export const doAction = (params) => (dispatch, getState) => {
	const currentValue = getPosts(getState());
	dispatch(postsReceived());
};

//#endregion

//#region //! Slice

const post = createSlice({
	name: "post",

	initialState,

	reducers: {
		postsRequested: (posts, action) => {
			posts.loading = action.payload;
		},
		postsReceived: (posts, action) => {
			posts.list = action.payload;
			posts.loading = false;
		},
		postsRequestFailed: (posts, action) => {
			posts.loading = false;
		},
	},

	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(doActionAsync.pending, (posts) => {
				posts.loading = true;
			})
			.addCase(doActionAsync.fulfilled, (posts, action) => {
				posts.loading = false;
				posts.list += action.payload;
			})
			.addCase(doActionAsync.rejected, (posts, action) => {
				posts.loading = false; // Alert user
			});
	},
});

//#endregion

//#region //! Exports

const { postsRequested, postsReceived, postsRequestFailed } = post.actions;
export default post.reducer;

//#endregion
